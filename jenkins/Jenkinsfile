pipeline {
  agent any

  environment {
    HTTP_PROXY = 'http://127.0.0.1:9888'
  }

  stages {
    stage('Set JAVA_HOME Dynamically') {
      steps {
        script {
          echo 'Detecting Java path...'
          // Find Java path dynamically
          def javaPath = sh(script: "readlink -f \$(which java) | sed 's:/bin/java::'", returnStdout: true).trim()
          env.JAVA_HOME = javaPath
          echo "Detected JAVA_HOME: ${env.JAVA_HOME}"
        }
      }
    }

    stage('Check Java Installation') {
      steps {
        script {
          echo "JAVA_HOME is: ${env.JAVA_HOME}"
          def javaVersion = sh(script: "${env.JAVA_HOME}/bin/java -version 2>&1", returnStdout: true).trim()
          echo "Java version:\n${javaVersion}"
        }
      }
    }

    stage('Build') {
      steps {
        echo 'Running Gradle build...'
        sh './gradlew clean assemble'
      }
    }

    stage('Unit Tests') {
      steps {
        echo 'Running Unit Tests...'
        sh './gradlew test'
      }
    }

    stage('Database Tests') {
      steps {
        echo 'Running Database Tests...'
        sh './gradlew dbTest'
      }
    }

    stage('BDD Tests') {
      steps {
        echo 'Running BDD Tests...'
        sh './gradlew bddTest'
      }
    }

    stage('Static Analysis') {
      steps {
        echo 'Running Static Code Analysis...'
        sh './gradlew check'
      }
    }
  }

  post {
    always {
      echo 'Pipeline execution completed.'
    }
    success {
      echo 'Build successful!'
    }
    failure {
      echo 'Build failed. Please check logs for more details.'
    }
  }
}
