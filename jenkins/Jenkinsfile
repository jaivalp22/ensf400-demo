pipeline {
  agent any

  environment {
    // Set a default Java path (you can update this if needed)
    JAVA_HOME = '/usr/lib/jvm/java-11-openjdk-amd64'
    PATH = "${env.JAVA_HOME}/bin:${env.PATH}"
    HTTP_PROXY = 'http://127.0.0.1:9888'
  }

  stages {

    stage('Check Java Installation') {
      steps {
        script {
          echo 'Checking Java version and JAVA_HOME path...'

          // Print the current JAVA_HOME path
          def javaHome = sh(script: 'echo $JAVA_HOME', returnStdout: true).trim()
          echo "JAVA_HOME is set to: ${javaHome}"

          // Try printing the Java version to confirm it's installed
          try {
            def javaVersion = sh(script: 'java -version 2>&1', returnStdout: true).trim()
            echo "Java version:\n${javaVersion}"
          } catch (Exception e) {
            error("Java is not installed at ${javaHome}. Please verify JAVA_HOME or install Java.")
          }
        }
      }
    }

    stage('Build') {
      steps {
        echo 'Running Gradle build...'
        sh './gradlew clean assemble'
      }
    }

    stage('Unit Tests') {
      steps {
        echo 'Running Unit Tests...'
        sh './gradlew test'
      }
    }

    stage('Database Tests') {
      steps {
        echo 'Running Database Tests...'
        sh './gradlew dbTest'
      }
    }

    stage('BDD Tests') {
      steps {
        echo 'Running BDD Tests...'
        sh './gradlew bddTest'
      }
    }

    stage('Static Analysis') {
      steps {
        echo 'Running Static Code Analysis...'
        sh './gradlew check'
      }
    }
  }

  post {
    always {
      echo 'Pipeline execution completed.'
    }
    success {
      echo 'Build successful!'
    }
    failure {
      echo 'Build failed. Please check logs for more details.'
    }
  }
}
